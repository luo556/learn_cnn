import torch as t
import os
from PIL import Image
import torchvision.transforms.functional as ff
import numpy as np
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader
import pandas as pd
import cfg
from PIL import Image



class labelprocessor:
    def __init__(self, file_path):
        # 得到标签对应的rgb值
        self.colormap = self.read_color_map(file_path)

        self.cm21bl = self.encode_label_pix(self.colormap)

    @staticmethod
    def read_color_map(file_path):
        # 用pandas来专门读csv的文件，用“，”来分割
        pd_label_color = pd.read_csv(file_path, sep=",")
        colormap = []
        # index，相当于循环长度次数
        for i in range(len(pd_label_color.index)):
            # iloc是按行读取得到名称和r  g b 的值 得到一个tmp临时文件（列表形式）
            tmp = pd_label_color.iloc[i]
            color = [tmp["r"], tmp["g"], tmp["b"]]
            # 得到所有种类对应的color
            colormap.append(color)
        # print("colormap")
        # print(colormap)
        return colormap

    #   用哈希表来对应查找 形成对应关系 把三个值转化为一个整数
    @staticmethod
    def encode_label_pix(colormap):
        # 三维数值
        cm21bl = np.zeros(256 ** 3)
        # 用enumerate来得到索引，和元素
        for i, cm in enumerate(colormap):
            cm21bl[(cm[0] * 256 + cm[1]) * 256 + cm[2]] = i
        # print(cm21bl)
        # # for i in range(len(cm21bl)):
        # #     if cm21bl[i-1] !=0:
        # #         print(cm21bl[i-1])
        #
        # print("over")
        # #     返回一个哈希表
        return cm21bl

    # 把img转成np的形式，强大的中转站工具
    def encode_label_img(self, img):
        data = np.array(img, dtype="int64")
        # print(data.shape)
        #data (352, 480, 3)
        # print(data)
        # print(data[0, 0, 1])
        idx = (data[:, :, 0] * 256 + data[:, :, 1]) * 256 + data[:, :, 2]
        # a = self.cm21bl[idx]
        # print(idx)
        # print(self.cm21bl)
        # for i in range(len(self.cm21bl)):
        #     if self.cm21bl[i-1] !=0:
        #         print(self.cm21bl[i-1])
        #
        # for i in range(352):
        #     for j in range(480):
        #         if a[i][j] != 0:
        #             # print(a[i][j])

        # print("done")

        # 用哈希表来对应索引
        return np.array(self.cm21bl[idx], dtype="int64")


labelprocessor = labelprocessor("CamVid/class_dict.csv")


class CamvidDataset(Dataset):
    def __init__(self, file_path0, file_path1, crop_size = None):
        self.img_path = file_path0
        self.label_path = file_path1
        self.img = self.read_file(self.img_path)
        self.label = self.read_file(self.label_path)
        self.cropsize = crop_size

    def __getitem__(self, index):
        img_1 = self.img[index]
        label_1 = self.label[index]

        img_1 = Image.open(img_1)
        label_1 = Image.open(label_1).convert("RGB")

#         中心裁剪
        img_1 = ff.center_crop(img_1, self.cropsize)
        label_1 = ff.center_crop(label_1, self.cropsize)
        # label_1.show()

        img_1, label_1 = self.img_transform(img_1, label_1)

        sample = {"img":img_1,  "label":label_1}
        # print(sample)
        return sample

    def __len__(self):
        return len(self.img)


    def img_transform(self, img, label):
        label = np.array(label)
        # print(label)
        label =Image.fromarray(label.astype("uint8"))
        # label.show()
        trans_pro = transforms.Compose(
            [transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]
        )

        img = trans_pro(img)
        label = labelprocessor.encode_label_img(label)

        # for i in range(352):
        #     for j in range(480):
        #         if label[i][j] != 0:
        #             print(label[i][j])

        # print(label.shape)

        label =t.from_numpy(label)
        return img, label

    def read_file(self, path):
        files_list = os.listdir(path)
        # 再做列表的拼接
        file_path_list = [os.path.join(path, img) for img in files_list]
        file_path_list.sort()
        return file_path_list







# if __name__ == "__main__":
#     Cam_train = CamvidDataset(cfg.TRAIN_ROOT, cfg.TRAIN_LABEL, cfg.crop_size)
# print(Cam_train[0])

# class yang:
#     @staticmethod
#     def read_color_map(file_path):
#     # 用pandas来专门读csv的文件，用“，”来分割
#         pd_label_color = pd.read_csv(file_path, sep=",")
#         colormap = []
#     # index，相当于循环长度次数
#         for i in range(len(pd_label_color.index)):
#         # iloc是按行读取得到名称和r  g b 的值 得到一个tmp临时文件（列表形式）
#             tmp = pd_label_color.iloc[i]
#             color = [tmp["r"], tmp["g"], tmp["b"]]
#         # 得到所有种类对应的color
#             colormap.append(color)
#             return colormap
# yang = yang()
# a =yang.read_color_map("CamVid/class_dict.csv")
# print(a)
